from fastapi import FastAPI, Request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters
import asyncio
import logging
import httpx
import os

BOT_TOKEN = os.getenv("BOT_TOKEN", "8038595183:AAFFtj0X9npHd8srn2h32rMWdjAP8oPsvAI")
bot = Bot(token=BOT_TOKEN)
app = FastAPI()
loop = asyncio.get_event_loop()
dispatcher = Dispatcher(bot, None, workers=1, loop=loop)

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—á–µ—Ä–µ–∑ OpenAI, DeepL, Google –∏ –¥—Ä. –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å)
async def translate_text(text: str) -> str:
    # –ü—Ä–æ—Å—Ç–æ–π "—ç–º—É–ª—è—Ç–æ—Ä" –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)
    return (
        f"üá∑üá∫ [RU] –ü–µ—Ä–µ–≤–æ–¥: {text}\n"
        f"üá¨üáß [EN] Translation: {text}\n"
        f"üá®üá≥ [CN] ÁøªËØë: {text}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tr
async def tr_command(update: Update, context):
    message = update.message or update.effective_message
    if message.reply_to_message:
        original_text = message.reply_to_message.text
    else:
        original_text = " ".join(context.args)

    if not original_text:
        await message.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /tr.")
        return

    translated = await translate_text(original_text)
    await message.reply_text(translated)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@app.get("/")
async def root():
    return {"message": "Bot is running!"}

# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)
    await dispatcher.process_update(update)
    return {"status": "ok"}

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
dispatcher.add_handler(CommandHandler("tr", tr_command))
